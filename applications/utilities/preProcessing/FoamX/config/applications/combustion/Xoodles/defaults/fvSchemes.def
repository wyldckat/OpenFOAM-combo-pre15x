default
{

ddtSchemes
{
    default Euler;
}

gradSchemes
{
    default         Gauss linear;
    grad(p)         Gauss linear;
}

divSchemes
{
    default         none;
    div(phi,U)      Gauss Gamma2V 1;
    div(phid,p)     Gauss linear;
    div(phiU,p)     Gauss linear;
    div(phi,k)      Gauss Gamma2 1;
    div(phi,B)      Gauss Gamma2 1;
    div(B)          Gauss linear;
    div(phiXi,Xi)   Gauss Gamma2 1;
    div(phiXi,Su)   Gauss Gamma2 1;
    div(phiSt,b)    Gauss Gamma01 1;
    div(phi,ft_b_h_hu) Gauss multivariateSelection
    {
        fu              Gamma01 1;
        ft              Gamma01 1;
        b               Gamma01 1;
        h               Gamma2 1;
        hu              Gamma2 1;
    };
    div(U)          Gauss linear;
    div((Su*grad(b))) Gauss linear;
    div((U+((Su*Xi)*grad(b)))) Gauss linear;
    div((muEff*dev2(grad(U).T()))) Gauss linear;
}

laplacianSchemes
{
    default         none;
    laplacian(muEff,U) Gauss linear corrected;
    laplacian(DkEff,k) Gauss linear corrected;
    laplacian(DBEff,B) Gauss linear corrected;
    laplacian((rho|A(U)),p) Gauss linear corrected;
    laplacian(muEff,b) Gauss linear corrected;
    laplacian(muEff,ft) Gauss linear corrected;
    laplacian(alphaEff,h) Gauss linear corrected;
    laplacian(alphaEff,hu) Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    p;
}

}
